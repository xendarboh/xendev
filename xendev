#!/bin/bash

name="${1:-xendev}"
docker='docker'
image='xen/dev'

if (docker inspect ${name} >/dev/null 2>&1)
then
  echo "${name} already running, entering existing container"
  ${docker} exec -ti ${name} /bin/bash
else
  # NOTE: host user should not be "xendev"
  U=$(whoami)

  # source .env for configuration
  script_dir=$(realpath $(basename $0))
  test -e ${script_dir}/.env && source ${script_dir}/.env

  # pass args after name ($1) to x11docker
  shift 1 ; x11docker_args="${@}"

  # nix needs systemd for non-root usage
  # Note: this option degrades container isolation
  # https://github.com/mviereck/x11docker/wiki/Init-systems#init-in-docker-container
  if [ "${INSTALL_NIX}" = "1" ]; then
   x11docker_args="--init=systemd ${x11docker_args}"
  fi

  # ensure volume directories exist
  mkdir -p /home/${U}/.config/git
  mkdir -p /home/${U}/.gnupg
  mkdir -p /home/${U}/.local/share/xendev
  mkdir -p /home/${U}/src

  x11docker \
    --clipboard \
    --gpu \
    --name ${name} \
    --network=host \
    --share /media \
    --share /mnt \
    --share /srv \
    --share ~/.gnupg \
    --share ~/.ssh \
    ${x11docker_args} \
    -- \
    --tmpfs /tmp:exec \
    --volume /home/${U}/.config/git:/home/xendev/.config/git \
    --volume /home/${U}/.local/share/xendev:/home/xendev/.local/share \
    --volume /home/${U}/src:/home/xendev/src \
    --hostname $(hostname)-${name} \
    -- \
    ${image} \
    kitty \
      -T ${name}
fi
